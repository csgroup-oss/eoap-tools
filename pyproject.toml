[build-system]
requires = ["hatchling >= 1.27.0"]
build-backend = "hatchling.build"

# -----------------------------------------------
# Package infos

[project]
name = "eoap-tools"
description = "Earth Observation Application Package tools for CWL files"
version = "0.0.0"
authors = [
    { name = "CS GROUP - FRANCE" },
]
readme = "README.md"
license = "Apache-2.0"
license-files = ["LICENSE", "NOTICE"]
requires-python = ">=3.12"
keywords = ["eoap", "cwl", "stac"]
classifiers = [
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Version Control :: Git",
    "Typing :: Typed",
]
dependencies = [
    "GitPython~=3.1",
    "click~=8.2",
    "dvc[s3]~=3.61",
    "pystac~=1.13",
    "requests~=2.32",
]

[project.scripts]
eoap-tools = "eoap_tools._cli:main"

[project.urls]
"Homepage" = "https://github.com/csgroup-oss/eoap-tools"
"Source" = "https://github.com/csgroup-oss/eoap-tools"
"Bug Tracker" = "https://github.com/csgroup-oss/eoap-tools/issues"

# -----------------------------------------------
# Development dependencies

[dependency-groups]
dev = [
    "build~=1.3",
    "commitizen==4.9.1",
    "pre-commit~=4.3",
    "pre-commit-uv",
    "rich~=14.1", # Script watch.py
    "tox~=4.30",
    "tox-uv",
    "watchdog~=6.0", # Script watch.py
]
lint = [
    "mypy==1.17",
    "ruff==0.13.0",
    # Types
    "types-requests",
]
test = [
    "pytest-cov~=7.0",
    "pytest-html~=4.1",
    "pytest-randomly~=4.0", # Randomize testing order
    "pytest-sugar~=1.1", # Better output
    "pytest~=8.4",
]

# -----------------------------------------------
# Build & Packaging

[tool.hatch.build]
skip-excluded-dirs = true

# -----------------------------------------------
# Linters

[tool.mypy]
strict = true
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
pretty = true
exclude = ["scripts", "tests"]

[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = ["scripts"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 72

[tool.ruff.lint]
select = [
    "F", # PyFlakes
    "E", "W", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flint
    "PERF", # Perflint
    "FURB", # refurb
    "RUF", # Ruff
    # flake8-* plugins
    "A", "ANN", "ARG", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "EM", "EXE", "FIX",
    "G", "ICN", "INP", "ISC", "LOG", "PIE", "PT", "PTH", "PYI", "Q", "RET", "RSE",
    "S", "SIM", "SLF", "SLOT", "T10", "T20", "TC", "TD", "TID", "YTT",
]
ignore = [
    "D105", "D107", "D203", "D213", "D417", "TRY400",
    # Formatter compatibility (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
    "W191", "E111", "E114", "E117", "D206", "D300", "Q000", "Q001", "Q002", "Q003",
    "COM812", "COM819", "ISC001", "ISC002",
]

[tool.ruff.lint.extend-per-file-ignores]
"src/*/_cli.py" = ["T201"]
"tests/**" = ["ANN201", "ARG001", "INP001", "PLR0913", "PLR2004", "S101"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# -----------------------------------------------
# Tests

[tool.pytest.ini_options]
minversion = "8.0"
required_plugins = [
    "pytest-cov",
]
testpaths = [
    "src",
    "tests",
]
addopts = [
    "--doctest-modules",
    # pytest-cov
    "--cov=src",
    "--cov-config=pyproject.toml",
    "--cov-report=term-missing",
]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "src/*/__main__.py",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __str__",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]

# -----------------------------------------------
# Others

[tool.commitizen]
version_provider = "pep621"
version_scheme = "pep440"
annotated_tag = true
changelog_incremental = true
change_type_order = ["Features", "Bug fixes", "Perf", "Internal"]

[tool.commitizen.change_type_map]
feat = "Features"
fix = "Bug fixes"
perf = "Perf"
refactor = "Internal"
